-----

# 🚀 Fundamentals of Programming, Efficiency, and Data Management

This repository documents my comprehensive study across three critical domains in Computer Science and Data Science: **Python Programming Fundamentals**, **Computational Complexity (Big O)**, and **SQL/Relational Databases**.
It serves as a detailed reference for core concepts, syntax rules, and practical application methods.

-----

## 📚 Module Breakdown

This project is organized around three main modules, covering both theoretical and practical skills.

### Module 1: Python Fundamentals 🐍

This section covers the absolute essentials of writing functional, readable code in Python.

| Topic | Description |
| :--- | :--- |
| **Syntax & Structure** | Keywords, Identifiers, Comments, and the critical role of **Indentation** and **Statements**. |
| **Data Types & Variables** | Defining and utilizing basic data types (`int`, `float`, `str`, `bool`) and the rules for naming **Variables**. |
| **I/O & Operators** | Handling **Standard Input** (`input()`) and **Output** (`print()`), and using arithmetic and logical **Operators** (`+`, `//`, `%`, `and`, `or`). |
| **Control Flow** | Implementing decision-making logic with **`if/else/elif`** structures and repetition with **`while` loops**. |

### Module 2: Computational Complexity (Big O) ⏱️

This module focuses on algorithm efficiency and performance analysis, independent of hardware.

| Concept | Description |
| :--- | :--- |
| **Complexity Analysis** | Understanding **scalability** and why runtime matters for large datasets ($\mathbf{N}$). |
| **Big O Notation** | Measuring the **worst-case** efficiency using standardized notations. |
| **Key Complexities** | **$O(1)$** (Constant), **$O(\log N)$** (Logarithmic, e.g., Binary Search), **$O(N)$** (Linear), and **$O(N^2)$** (Quadratic, e.g., Nested Loops). |

### Module 3: SQL and Databases 🗄️

This section covers the foundations of relational database management and querying data using SQL.

| Topic | Description |
| :--- | :--- |
| **Database Basics** | Introduction to Databases, why use **SQL**, and the four crucial **ACID** properties (Atomicity, Consistency, Isolation, Durability). |
| **Basic Querying** | Core statements: **`SELECT`**, **`FROM`**, **`WHERE`**. Using comparison operators (`=`, `<>`) and handling **`NULL`** values (`IS NULL`). |
| **Aggregation & Grouping** | Summarizing data using **Aggregate Functions** (`COUNT`, `MIN`, `MAX`, `AVG`, `SUM`) and organizing results with **`GROUP BY`** and **`HAVING`**. |
| **Advanced Filtering & Joins**| Using **Logical Operators** (`AND`, `OR`, `NOT`), **`ORDER BY`**, **`LIMIT`**, and connecting related tables with various **JOIN** types (Inner, Left, Right, Outer). |

-----

## ⚙️ Getting Started

To run or review the code examples and SQL files related to this study, follow these steps.

### Prerequisites

1.  **Python:** Ensure you have **Python 3.x** installed.
2.  **MySQL:** (For SQL modules) Install a MySQL server or a similar RDBMS (e.g., PostgreSQL, SQLite).
3.  **IMDB Dataset:** If studying the data loading section, ensure you have the necessary IMDB dataset files (often provided as part of specific courses or downloaded publicly).

### Installation (Python)

No specific libraries are required for the Python fundamentals, but for data science exercises, you may need:

```bash
pip install numpy pandas # If included in your DataScience section
```

### Database Setup (SQL)

The SQL module requires a running database instance:

1.  Install **MySQL** (or preferred RDBMS).
2.  Log into your server:
    ```bash
    mysql -u [your_user] -p
    ```
3.  Execute the necessary scripts to **Load IMDB data** and set up the database structure as outlined in the module.

-----

## 📂 Repository Structure

The project files are typically structured as follows:

```
.
├── python_fundamentals/
│   ├── basics.py         # Keywords, I/O, Operators, If/Else
│   └── loops.py          # While loop examples
├── complexity_analysis/
│   └── big_o_examples.py # O(1), O(N), O(N^2) code examples
└── sql_scripts/
    ├── 01_setup.sql      # Database creation, Load IMDB data
    ├── 02_basic_select.sql # SELECT, WHERE, ORDER BY, LIMIT
    └── 03_joins_agg.sql  # GROUP BY, HAVING, and various JOINs
```

-----

## 🤝 Contributing

This is a personal study repository, but suggestions for better structure, clarity, or efficiency improvements on the code examples are always welcome\!

-----

## 📄 License

This project is for educational and personal use.

-----

**Happy Coding and Querying\!**

-----
